@page "/"
@inject HttpClient injecao_Http

@foreach (Usuario naLista in listaUsuarios)
{

    <tr>
        <td>@naLista.Id</td>
        <td>@naLista.Nome</td>
        <td>@naLista.Idade</td>

        <td><button class="btn btn-primary" @onclick="() => Deletar(naLista)">Deletar</button></td>
        <td><button class="btn btn-primary" @onclick="() => Alterar(naLista)">Alterar</button></td>

    </tr>
}

<p>
    <label>Digite o Id da pessoa Buscada: </label>
    <input type="number" @bind-Value="_Id" @bind-Value:event="oninput" />

    @*<InputNumber @bind-Value="pessoa1.Id" @bind-value:event="oninput"></InputNumber>*@
</p>

<td><button class="btn btn-primary" @onclick="() => BuscaTodos()">Busca Todos</button></td>

@*<button @onclick="(() => add())" type="submit"> Enviar </button>*@
<button @onclick="Buscar"> Buscar </button>

<EditForm Model="@atual" OnValidSubmit="@(() => Adicionar(atual))">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <label>Nome:</label>
    <InputText @bind-Value="atual.Nome"></InputText>
    <label>Idade:</label>
    <InputNumber @bind-Value="atual.Idade"></InputNumber>
    <button type="submit" class="btn btn-primary">Adiciona</button>

</EditForm>


<div class="Atualizar" style="visibility:@mostrar">
    <EditForm Model="@usuario1" OnValidSubmit="@(() => Confirma(usuario1))">

        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
       
        <label>Nome:</label>
        <InputText @bind-Value="usuario1.Nome"></InputText>
        <label>Idade:</label>
        <InputNumber @bind-Value="usuario1.Idade"></InputNumber>
        <button type="submit" class="btn btn-primary">Confirma</button>
        
    </EditForm>
</div>

<div class="text-sucess">
    <p>A Pessoa buscada é: Id: @atual.Id,  Nome: @atual.Nome, Idade: @atual.Idade</p>

</div>

@code{
    public Usuario usuario1 = new Usuario();
    public Usuario atual = new Usuario();
    List<Usuario> listaUsuarios = new List<Usuario>();
    int id;
    string mostrar = "hidden";
    int cont = 0;

    private int _Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await BuscaTodos();
    }

    protected override void OnInitialized()
    {
        /*
        Usuario usuario1 = new Usuario { Id = 1, Nome = "Superman", Idade = 32 };
        Usuario usuario2 = new Usuario { Id = 2, Nome = "Batman", Idade = 33 };
        Usuario usuario3 = new Usuario { Id = 3, Nome = "Lanterna Verde", Idade = 31 };
        Usuario usuario4 = new Usuario { Id = 4, Nome = "Flash", Idade = 26 };
        Usuario usuario5 = new Usuario { Id = 5, Nome = "Wolverine", Idade = 130 };

        atual = usuario1;
        Adicionar(atual);
        atual = usuario2;
        Adicionar(atual);
        atual = usuario3;
        Adicionar(atual);
        atual = usuario4;
        Adicionar(atual);
        atual = usuario5;
        Adicionar(atual);
               
        cont = listaUsuarios.Count;
        */


    }

    /*
    public void Adicionar(Usuario atual)
    {
        Usuario novo = new Usuario();
        novo.Nome = atual.Nome;
        novo.Idade = atual.Idade;
        listaUsuarios.Add(novo);

        cont++;
    }
    */

    public async Task BuscaTodos()
    {
        listaUsuarios = await injecao_Http.GetFromJsonAsync<List<Usuario>>("api/Usuario/BuscaListaUsuarios");
    }

    public async void Buscar()
    {
        Usuario buscado = await injecao_Http.GetFromJsonAsync<Usuario>("api/Usuario/BuscaUsuario/" + _Id);

        atual.Id = buscado.Id;
        atual.Nome = buscado.Nome;
        atual.Idade = buscado.Idade;

        StateHasChanged();
    }

    public async void Adicionar(Usuario novo)
    {

        HttpResponseMessage e = await injecao_Http.PostAsJsonAsync<Usuario>("api/Usuario/AdicionaUsuario", atual);

        if (e.IsSuccessStatusCode)
        {
            Console.WriteLine("Deu  super bom");
            novo = await e.Content.ReadFromJsonAsync<Usuario>();
            listaUsuarios.Add(novo);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Deu  super ruim");

        }
    }

    public async void Alterar(Usuario usuario)
    {

        usuario1 = usuario;
        mostrar = "visible";
        StateHasChanged();
    }

    public async void Deletar(Usuario usuario)
    {

        HttpResponseMessage e = await injecao_Http.DeleteAsync("api/Usuario/DeletaUsuario/" + usuario.Id);

        if (e.IsSuccessStatusCode)
        {
            //usuario = await e.Content.ReadFromJsonAsync<Usuario>();
            listaUsuarios.Remove(listaUsuarios.First(e => e.Id == usuario.Id));
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Deu ruim");
        }
    }

    public async void Confirma(Usuario usuario)
    {
        await injecao_Http.PutAsJsonAsync<Usuario>("api/Usuario/AlteraUsuario", usuario);
        mostrar = "hidden";
    }
}
